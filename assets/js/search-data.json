{
  
    
        "post0": {
            "title": "EDA<a id=2></a>",
            "content": "Table of content . EDA | Data Visulization | Logistic Regression using Gradient Descent | Logistic Regression using Mini-batch SGD | Logistic Regression using SGD with momentum | Logistic Regression using using sklearn | # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python # For example, here&#39;s several helpful packages to load import numpy as np # linear algebra import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) # Input data files are available in the read-only &quot;../input/&quot; directory # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory import os for dirname, _, filenames in os.walk(&#39;/kaggle/input&#39;): for filename in filenames: print(os.path.join(dirname, filename)) # You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using &quot;Save &amp; Run All&quot; # You can also write temporary files to /kaggle/temp/, but they won&#39;t be saved outside of the current session . /kaggle/input/logistic-regression/Social_Network_Ads.csv . import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler,LabelEncoder,MinMaxScaler import seaborn as sns from sklearn.decomposition import PCA . df=pd.read_csv(&#39;/kaggle/input/logistic-regression/Social_Network_Ads.csv&#39;) df.head() . User ID Gender Age EstimatedSalary Purchased . 0 15624510 | Male | 19 | 19000 | 0 | . 1 15810944 | Male | 35 | 20000 | 0 | . 2 15668575 | Female | 26 | 43000 | 0 | . 3 15603246 | Female | 27 | 57000 | 0 | . 4 15804002 | Male | 19 | 76000 | 0 | . len(df[&#39;User ID&#39;].unique()) df.drop(columns=[&#39;User ID&#39;],inplace=True) . df.describe() . Age EstimatedSalary Purchased . count 400.000000 | 400.000000 | 400.000000 | . mean 37.655000 | 69742.500000 | 0.357500 | . std 10.482877 | 34096.960282 | 0.479864 | . min 18.000000 | 15000.000000 | 0.000000 | . 25% 29.750000 | 43000.000000 | 0.000000 | . 50% 37.000000 | 70000.000000 | 0.000000 | . 75% 46.000000 | 88000.000000 | 1.000000 | . max 60.000000 | 150000.000000 | 1.000000 | . df.isnull().sum() . Gender 0 Age 0 EstimatedSalary 0 Purchased 0 dtype: int64 . df.dtypes . Gender object Age int64 EstimatedSalary int64 Purchased int64 dtype: object . le=LabelEncoder() df[&#39;Gender&#39;]=le.fit_transform(df[&#39;Gender&#39;]) . sc=MinMaxScaler() df_n=sc.fit_transform(df.iloc[:,:-1]) . x_train,x_test,y_train,y_test=train_test_split(df_n,df[&#39;Purchased&#39;]) y_train.reset_index(drop=True,inplace=True) y_test.reset_index(drop=True,inplace=True) x=x_train y=y_train . Data Visulization . sns.pairplot(df,hue=&#39;Purchased&#39;) . &lt;seaborn.axisgrid.PairGrid at 0x7fd93691a410&gt; . sns.boxplot(x=&#39;Purchased&#39;,y=&#39;EstimatedSalary&#39;,data=df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd936293d10&gt; . sns.boxplot(x=&#39;Purchased&#39;,y=&#39;Age&#39;,data=df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd934a0a790&gt; . df_gender=df[[&#39;Gender&#39;,&#39;Purchased&#39;]].groupby(&#39;Purchased&#39;).sum() df_gender.index=[&#39;Male&#39;,&#39;Female&#39;] df_gender[&#39;Gender&#39;].plot(kind=&#39;pie&#39;,autopct=&#39;%1.1f%%&#39;) plt.show() . Logistic Regression using Gradient Descent . def sigmoid(x,w,b): return 1/(1+np.exp(-(np.dot(x,w)+b))) def loss(x,w,y,b): s=sigmoid(x,w,b) return np.mean(-(y*np.log(s))- ((1-y)*np.log(1-s))) def grad(x,y,w,b): s=sigmoid(x,w,b) return np.dot(x.T,(s-y))/x.shape[0] . def accuracy(y_pred,y_test): return np.mean(y_pred==y_test) . def gradientdescent(x,y): w=np.zeros((x.shape[1])) b=np.zeros(1) ite=1000 #number of iteration eta=0.7 #learning rate loss_v=[] for i in range(ite): probability=sigmoid(x,w,b) l=loss(x,w,y,b) gradient=grad(x,y,w,b) w=w- (eta*gradient) b=b-(eta*np.sum(probability-y)/x.shape[0]) loss_v.append(l) if i%100==0: print(l) return w,b,loss_v . w,b,loss_v=gradientdescent(x,y) y_pred=sigmoid(x_test,w,b) for j,i in enumerate(y_pred): if i&lt;0.5: y_pred[j]=0 else: y_pred[j]=1 print(&#39;test accuracy&#39;,accuracy(y_pred,y_test)) . 0.6931471805599467 0.46824620053813504 0.41373079197199336 0.3897267439098201 0.37674477979951454 0.36885655071698165 0.363696412749435 0.36014577026616207 0.3576113857482108 0.35575160674492456 test accuracy 0.86 . plt.plot(range(len(loss_v)),loss_v) plt.xlabel(&#39;iteration&#39;) plt.ylabel(&#39;loss&#39;) plt.show() . Logistic Regression using Mini-batch SGD . batch_size=8 def sgd(x,y,batch_size): # initilize w and b w=np.zeros((x_train.shape[1])) b=np.zeros(1) ite=1000 #number of iteration eta=0.7 #learning rate loss_v=[] for i in range(1000): ind=np.random.choice(len(y_train),batch_size) x_b=x[ind] y_b=y[ind] p=sigmoid(x_b,w,b) l=loss(x_b,w,y_b,b) gradient=grad(x_b,y_b,w,b) w=w- (0.1*gradient) b=b-(eta*np.sum(p-y_b)/x.shape[0]) if i%10==0: loss_v.append(l) if i%100==0: print(&#39;loss&#39;,l) return w,b,loss_v . w,b,loss_v=sgd(x,y,32) y_pred=sigmoid(x_test,w,b) for j,i in enumerate(y_pred): if i&lt;0.5: y_pred[j]=0 else: y_pred[j]=1 print(&#39;test accuracy&#39;,accuracy(y_pred,y_test)) . loss 0.6931471805599448 loss 0.6278149588111854 loss 0.6035356489914048 loss 0.4881741340927539 loss 0.5486975396008116 loss 0.4963472981460031 loss 0.4807055091535177 loss 0.5649417248839724 loss 0.4608513419074556 loss 0.5171429870812208 test accuracy 0.84 . plt.plot(range(len(loss_v)),loss_v) plt.xlabel(&#39;iteration&#39;) plt.ylabel(&#39;loss&#39;) plt.show() . Logistic Regression using SGD with momentum . batch_size=8 def sgdmomentum(x,y,batch_size): # initilize w and b w=np.zeros((x_train.shape[1])) b=np.zeros(1) ite=1000 #number of iteration eta=0.7 #learning rate alpha=0.9 loss_v=[] v_t=np.zeros((x_train.shape[1])) v_b=np.zeros(1) for i in range(1000): ind=np.random.choice(len(y_train),batch_size) x_b=x[ind] y_b=y[ind] p=sigmoid(x_b,w,b) l=loss(x_b,w,y_b,b) gradient=grad(x_b,y_b,w,b) v_t =(alpha*v_t) + (eta*gradient) w=w-v_t v_b=(alpha*v_b) + (eta*np.sum(p-y_b)/x.shape[0]) b=b-v_b if i%10==0: loss_v.append(l) if i%100==0: print(&#39;loss&#39;,l) return w,b,loss_v . w,b,loss_v=sgdmomentum(x,y,32) . loss 0.6931471805599448 loss 0.4220835670845099 loss 0.2941736243371927 loss 0.44537673992679633 loss 0.2871349895011394 loss 0.6241278912840013 loss 0.34683687828696796 loss 0.18828219280440267 loss 0.4223695477823046 loss 0.34499265763927867 . plt.plot(range(len(loss_v)),loss_v) plt.xlabel(&#39;iteration&#39;) plt.ylabel(&#39;loss&#39;) plt.show() . y_pred=sigmoid(x_test,w,b) for j,i in enumerate(y_pred): if i&lt;0.5: y_pred[j]=0 else: y_pred[j]=1 print(&#39;test accuracy&#39;,accuracy(y_pred,y_test)) . test accuracy 0.86 . Logistic Regression using Using sklearn . from sklearn.linear_model import LogisticRegression . model= LogisticRegression() model.fit(x_train,y_train) y_pred=model.predict(x_test) print(&#39;test accuracy&#39;,accuracy(y_pred,y_test)) . test accuracy 0.82 .",
            "url": "https://ujjalkumarmaity.github.io/blog/2021/12/28/logistic-regression-from-scratch.html",
            "relUrl": "/2021/12/28/logistic-regression-from-scratch.html",
            "date": " • Dec 28, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ujjalkumarmaity.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ujjalkumarmaity.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ujjalkumarmaity.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ujjalkumarmaity.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}